import heapq
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

class Station:
    def __init__(self, name):
        self.name = name
        self.connections = []

class MetroGraph:
    def __init__(self):
        self.stations = {}

    def add_station(self, name):
        if name not in self.stations:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            station = Station(name)
            self.stations[name] = station

    def add_connection(self, station1, station2, travel_time):
        if station1 in self.stations and station2 in self.stations:
            self.stations[station1].connections.append((station2, travel_time))
        else:
            print(f"–û—à–∏–±–∫–∞: –æ–¥–Ω–∞ –∏–∑ —Å—Ç–∞–Ω—Ü–∏–π '{station1}' –∏–ª–∏ '{station2}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    def display_connections(self):
        if not self.stations:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.")
            return

        print("–°–≤—è–∑–∏ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏:")
        for station_name, station in self.stations.items():
            connections_output = ', '.join([f"{conn[0]} (–≤—Ä–µ–º—è: {conn[1]} –º–∏–Ω)" for conn in station.connections])
            print(f"–°—Ç–∞–Ω—Ü–∏—è {station_name}: {connections_output if connections_output else '–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π'}")

metro_graph = MetroGraph()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –ö—Ä–∞—Å–Ω–æ–π –≤–µ—Ç–∫–∏
metro_graph.add_station("rAeroport")
metro_graph.add_station("rEseninskaya")
metro_graph.add_station("rMayakovskaya")
metro_graph.add_station("rSnegiryovskaya")
metro_graph.add_station("rMendeleevskaya")
metro_graph.add_station("rPanteon")
metro_graph.add_station("rTeatralnaya")
metro_graph.add_station("rDvoretsKultury")
metro_graph.add_station("rStaryiGorod")
metro_graph.add_station("rAvtozavodskaya")
metro_graph.add_station("rMetrogorodok")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –ñ–µ–ª—Ç–æ–π –≤–µ—Ç–∫–∏
metro_graph.add_station("yVostochnyiPort")
metro_graph.add_station("yMayakovskaya")
metro_graph.add_station("yLermontovskaya")
metro_graph.add_station("yPushkinskaya")
metro_graph.add_station("yVystavochnaya")
metro_graph.add_station("yFinansovaya")
metro_graph.add_station("yDomSovetov")
metro_graph.add_station("yStudencheskaya")
metro_graph.add_station("yChistyePrudy")
metro_graph.add_station("yVnukovskaya")
metro_graph.add_station("yAvtozavodskaya")
metro_graph.add_station("yBabushkinskaya")
metro_graph.add_station("yYugoZapadnaya")
metro_graph.add_station("yElektrouzavodskaya")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –°–∏–Ω–µ–π –≤–µ—Ç–∫–∏
metro_graph.add_station("bNaberezhnaya")
metro_graph.add_station("bTuristicheskaya")
metro_graph.add_station("bYantarnaya")
metro_graph.add_station("bKrylatskoe")
metro_graph.add_station("bNarodnoyeOpolchenie")
metro_graph.add_station("bStudencheskaya")
metro_graph.add_station("bFiztekh")
metro_graph.add_station("bPanteon")
metro_graph.add_station("bFrunzenskaya")
metro_graph.add_station("bUniversitet")
metro_graph.add_station("bParkPobedy")
metro_graph.add_station("bRabochaya")
metro_graph.add_station("bPromyshlennaya")
metro_graph.add_station("bYugoVostochnaya")
metro_graph.add_station("bTEC")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –ó–µ–ª–µ–Ω–æ–π –≤–µ—Ç–∫–∏
metro_graph.add_station("gZapadnyiPort")
metro_graph.add_station("gTyoplyStan")
metro_graph.add_station("gYantarnaya")
metro_graph.add_station("gTuristicheskaya")
metro_graph.add_station("gVystavochnaya")
metro_graph.add_station("gMinisterstvoYustitsii")
metro_graph.add_station("gMendeleevskaya")
metro_graph.add_station("gRabochaya")
metro_graph.add_station("gYashlek")
metro_graph.add_station("gOkskaya")
metro_graph.add_station("gUlitsaRadio")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –ú–¶–î
metro_graph.add_station("mUlitsaRadio")
metro_graph.add_station("mSnegiryovskaya")
metro_graph.add_station("mVnukovskaya")

metro_stations = {
    "üî¥ –ê—ç—Ä–æ–ø–æ—Ä—Ç": "rAeroport",
    "üî¥ –ï—Å–µ–Ω–∏–Ω—Å–∫–∞—è": "rEseninskaya",
    "üî¥ –ú–∞—è–∫–æ–≤—Å–∫–∞—è": "rMayakovskaya",
    "üî¥ –°–Ω–µ–≥–∏—Ä—ë–≤—Å–∫–∞—è": "rSnegiryovskaya",
    "üî¥ –ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫–∞—è": "rMendeleevskaya",
    "üî¥ –ü–∞–Ω—Ç–µ–æ–Ω": "rPanteon",
    "üî¥ –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è": "rTeatralnaya",
    "üî¥ –î–≤–æ—Ä–µ—Ü –ö—É–ª—å—Ç—É—Ä—ã": "rDvoretsKultury",
    "üî¥ –°—Ç–∞—Ä—ã–π –ì–æ—Ä–æ–¥": "rStaryiGorod",
    "üî¥ –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è": "rAvtozavodskaya",
    "üî¥ –ú–µ—Ç—Ä–æ–≥–æ—Ä–æ–¥–æ–∫": "rMetrogorodok",

    "üü° –í–æ—Å—Ç–æ—á–Ω—ã–π –ü–æ—Ä—Ç": "yVostochnyiPort",
    "üü° –ú–∞—è–∫–æ–≤—Å–∫–∞—è": "yMayakovskaya",
    "üü° –õ–µ—Ä–º–æ–Ω—Ç–æ–≤—Å–∫–∞—è": "yLermontovskaya",
    "üü° –ü—É—à–∫–∏–Ω—Å–∫–∞—è": "yPushkinskaya",
    "üü° –í—ã—Å—Ç–∞–≤–æ—á–Ω–∞—è": "yVystavochnaya",
    "üü° –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è": "yFinansovaya",
    "üü° –î–æ–º –°–æ–≤–µ—Ç–æ–≤": "yDomSovetov",
    "üü° –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è": "yStudencheskaya",
    "üü° –ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã": "yChistyePrudy",
    "üü° –í–Ω—É–∫–æ–≤—Å–∫–∞—è": "yVnukovskaya",
    "üü° –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è": "yAvtozavodskaya",
    "üü° –ë–∞–±—É—à–∫–∏–Ω—Å–∫–∞—è": "yBabushkinskaya",
    "üü° –Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è": "yYugoZapadnaya",
    "üü° –≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è": "yElektrouzavodskaya",

    "üîµ –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è": "bNaberezhnaya",
    "üîµ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è": "bTuristicheskaya",
    "üîµ –Ø–Ω—Ç–∞—Ä–Ω–∞—è": "bYantarnaya",
    "üîµ –ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ": "bKrylatskoe",
    "üîµ –ù–∞—Ä–æ–¥–Ω–æ–µ –û–ø–æ–ª—á–µ–Ω–∏–µ": "bNarodnoyeOpolchenie",
    "üîµ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è": "bStudencheskaya",
    "üîµ –§–∏–∑—Ç–µ—Ö": "bFiztekh",
    "üîµ –ü–∞–Ω—Ç–µ–æ–Ω": "bPanteon",
    "üîµ –§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è": "bFrunzenskaya",
    "üîµ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç": "bUniversitet",
    "üîµ –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã": "bParkPobedy",
    "üîµ –†–∞–±–æ—á–∞—è": "bRabochaya",
    "üîµ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è": "bPromyshlennaya",
    "üîµ –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è": "bYugoVostochnaya",
    "üîµ –¢–≠–¶": "bTEC",

    "üü¢ –ó–∞–ø–∞–¥–Ω—ã–π –ü–æ—Ä—Ç": "gZapadnyiPort",
    "üü¢ –¢–µ–ø–ª—ã–π –°—Ç–∞–Ω": "gTyoplyStan",
    "üü¢ –Ø–Ω—Ç–∞—Ä–Ω–∞—è": "gYantarnaya",
    "üü¢ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è": "gTuristicheskaya",
    "üü¢ –í—ã—Å—Ç–∞–≤–æ—á–Ω–∞—è": "gVystavochnaya",
    "üü¢ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –Æ—Å—Ç–∏—Ü–∏–∏": "gMinisterstvoYustitsii",
    "üü¢ –ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫–∞—è": "gMendeleevskaya",
    "üü¢ –†–∞–±–æ—á–∞—è": "gRabochaya",
    "üü¢ –Ø—à—å–ª–µ–∫": "gYashlek",
    "üü¢ –û–∫—Å–∫–∞—è": "gOkskaya",
    "üü¢ –£–ª–∏—Ü–∞ –†–∞–¥–∏–æ": "gUlitsaRadio",

    "üöÇ –£–ª–∏—Ü–∞ –†–∞–¥–∏–æ": "mUlitsaRadio",
    "üöÇ –°–Ω–µ–≥–∏—Ä—ë–≤—Å–∫–∞—è": "mSnegiryovskaya",
    "üöÇ –í–Ω—É–∫–æ–≤—Å–∫–∞—è": "mVnukovskaya"
}

metro_graph.add_connection("mUlitsaRadio", "mSnegiryovskaya", 3)
metro_graph.add_connection("mUlitsaRadio", "mVnukovskaya", 3)
metro_graph.add_connection("mSnegiryovskaya", "mUlitsaRadio", 3)
metro_graph.add_connection("mSnegiryovskaya", "mVnukovskaya", 3)
metro_graph.add_connection("mVnukovskaya", "mUlitsaRadio", 3)
metro_graph.add_connection("mVnukovskaya", "mSnegiryovskaya", 3)

metro_graph.add_connection("mUlitsaRadio", "gUlitsaRadio", 2)
metro_graph.add_connection("mSnegiryovskaya", "rSnegiryovskaya", 2)
metro_graph.add_connection("mVnukovskaya", "yVnukovskaya", 2)
metro_graph.add_connection("gUlitsaRadio", "mUlitsaRadio", 2)
metro_graph.add_connection("rSnegiryovskaya", "mSnegiryovskaya", 2)
metro_graph.add_connection("yVnukovskaya", "mVnukovskaya", 2)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏: –∏–º—è —Å—Ç–∞–Ω—Ü–∏–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç —Å–≤—è–∑—å, –∏–º—è —Å—Ç–∞–Ω—Ü–∏–∏, –∫—É–¥–∞ –∏–¥–µ—Ç —Å–≤—è–∑—å, –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
# –ö—Ä–∞—Å–Ω–∞—è –≤–µ—Ç–∫–∞
red_stations = ["rAeroport", "rEseninskaya", "rMayakovskaya", "rSnegiryovskaya",
                "rMendeleevskaya", "rPanteon", "rTeatralnaya", "rDvoretsKultury",
                "rStaryiGorod", "rAvtozavodskaya", "rMetrogorodok"]

# –°–≤—è–∑–∏ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –≤–µ—Ç–∫–µ (1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏)
for i in range(len(red_stations) - 1):
    metro_graph.add_connection(red_stations[i], red_stations[i + 1], 1)
    metro_graph.add_connection(red_stations[i + 1], red_stations[i], 1)

# –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –≤–µ—Ç–∫–µ
metro_graph.add_connection("rMayakovskaya", "yMayakovskaya", 2)
metro_graph.add_connection("rPanteon", "bPanteon", 2)
metro_graph.add_connection("rMendeleevskaya", "gMendeleevskaya", 2)
metro_graph.add_connection("rAvtozavodskaya", "yAvtozavodskaya", 2)

# –ñ–µ–ª—Ç–∞—è –≤–µ—Ç–∫–∞
yellow_stations = ["yVostochnyiPort", "yMayakovskaya", "yLermontovskaya",
                   "yPushkinskaya", "yVystavochnaya", "yFinansovaya",
                   "yDomSovetov", "yStudencheskaya", "yChistyePrudy",
                   "yVnukovskaya", "yAvtozavodskaya", "yBabushkinskaya",
                   "yYugoZapadnaya", "yElektrouzavodskaya"]

# –°–≤—è–∑–∏ –Ω–∞ –ñ–µ–ª—Ç–æ–π –≤–µ—Ç–∫–µ (1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏)
for i in range(len(yellow_stations) - 1):
    metro_graph.add_connection(yellow_stations[i], yellow_stations[i + 1], 1)
    metro_graph.add_connection(yellow_stations[i + 1], yellow_stations[i], 1)

# –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ñ–µ–ª—Ç–æ–π –≤–µ—Ç–∫–µ
metro_graph.add_connection("yMayakovskaya", "rMayakovskaya", 2)
metro_graph.add_connection("yStudencheskaya", "bStudencheskaya", 2)
metro_graph.add_connection("yVystavochnaya", "gVystavochnaya", 2)
metro_graph.add_connection("yAvtozavodskaya", "rAvtozavodskaya", 2)

# –°–∏–Ω—è—è –≤–µ—Ç–∫–∞
blue_stations = ["bNaberezhnaya", "bTuristicheskaya", "bYantarnaya", "bKrylatskoe",
                 "bNarodnoyeOpolchenie", "bStudencheskaya", "bFiztekh",
                 "bPanteon", "bFrunzenskaya", "bUniversitet",
                 "bParkPobedy", "bRabochaya", "bPromyshlennaya",
                 "bYugoVostochnaya", "bTEC"]

# –°–≤—è–∑–∏ –Ω–∞ –°–∏–Ω–µ–π –≤–µ—Ç–∫–µ (1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏)
for i in range(len(blue_stations) - 1):
    metro_graph.add_connection(blue_stations[i], blue_stations[i + 1], 1)
    metro_graph.add_connection(blue_stations[i + 1], blue_stations[i], 1)

# –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –°–∏–Ω–µ–π –≤–µ—Ç–∫–µ
metro_graph.add_connection("bStudencheskaya", "yStudencheskaya", 2)
metro_graph.add_connection("bPanteon", "rPanteon", 2)
metro_graph.add_connection("bRabochaya", "gRabochaya", 2)
metro_graph.add_connection("bYantarnaya", "gYantarnaya", 2)
metro_graph.add_connection("bTuristicheskaya", "gTuristicheskaya", 2)

# –ó–µ–ª–µ–Ω–∞—è –≤–µ—Ç–∫–∞
green_stations = ["gZapadnyiPort", "gTyoplyStan", "gYantarnaya", "gTuristicheskaya",
                  "gVystavochnaya", "gMinisterstvoYustitsii", "gMendeleevskaya",
                  "gRabochaya", "gYashlek", "gOkskaya", "gUlitsaRadio"]

# –°–≤—è–∑–∏ –Ω–∞ –ó–µ–ª–µ–Ω–æ–π –≤–µ—Ç–∫–µ (1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏)
for i in range(len(green_stations) - 1):
    metro_graph.add_connection(green_stations[i], green_stations[i + 1], 1)
    metro_graph.add_connection(green_stations[i + 1], green_stations[i], 1)

# –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ó–µ–ª–µ–Ω–æ–π –≤–µ—Ç–∫–µ
metro_graph.add_connection("gRabochaya", "bRabochaya", 2)
metro_graph.add_connection("gYantarnaya", "bYantarnaya", 2)
metro_graph.add_connection("gTuristicheskaya", "bTuristicheskaya", 2)
metro_graph.add_connection("gVystavochnaya", "yVystavochnaya", 2)
metro_graph.add_connection("gMendeleevskaya", "rMendeleevskaya", 2)


def calculate_travel_time(graph, start_station, end_station):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    distances = {station: float('inf') for station in graph.stations}
    distances[start_station] = 0
    priority_queue = [(0, start_station)]
    previous_stations = {station: None for station in graph.stations}

    while priority_queue:
        current_distance, current_station = heapq.heappop(priority_queue)

        if current_distance > distances[current_station]:
            continue

        for neighbor, travel_time in graph.stations[current_station].connections:
            distance = current_distance + travel_time

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_stations[neighbor] = current_station
                heapq.heappush(priority_queue, (distance, neighbor))

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
    path = []
    while end_station is not None:
        path.append(end_station)
        end_station = previous_stations[end_station]

    path.reverse()
    reversed_metro_stations = {v: k for k, v in metro_stations.items()}
    translated_path = []
    for station in path:
        translated_station = reversed_metro_stations.get(station)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
        if translated_station:
            translated_path.append(translated_station)
    p = [path[i][0] for i in range(len(path))]
    stations = "\n".join(translated_path)
    #return stations
    return f"–í–∞—à –ø—É—Ç—å:\n{stations}\n–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ - {distances[path[-1]]} –º–∏–Ω—É—Ç,\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫ - {len(set(p)) - 1}"


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/calculate', methods=['POST'])
def calculate():
    data = request.json
    from_station = data.get('from')
    to_station = data.get('to')

    # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    travel_time = calculate_travel_time(metro_graph, from_station, to_station)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    return jsonify({'time': travel_time})


if __name__ == "__main__":
    app.run(debug=True)

# start = input()
# end = input()
# path, travel_time = dijkstra(metro_graph, metro_stations[start], metro_stations[end])
# reversed_metro_stations = {v: k for k, v in metro_stations.items()}
# if path:
#     for i in range(len(path)):
#         path[i] = reversed_metro_stations[path[i]]
#     stations = " -> ".join(path)
#     print("–í–∞—à –ø—É—Ç—å:")
#     print(stations)
#     print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: {travel_time} –º–∏–Ω—É—Ç")
#     p = [path[i][0] for i in range(len(path))]
#     print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫ - {len(set(p))-1}.")
# else:
#     print("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
